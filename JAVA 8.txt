Features in java 8 
*Lambda Expression
* Stream API
* Default methods in the interface
* Functional Interface
* Optional
* Method reference
* Date API
* Nashorn, JavaScript Engine


Advantages of Java8 
* More compact code
* Less boiler plate code
* More readable and reusable code
* More testable code
* Parallel operations


Lamda Expression 
* Lambda expression is anonymous function which have set of parameters and a lambda (->) and a function body .You can call it function without name.
* It has no access modifier , no return type 
* It can either have statements or expressions in the body 
* Lambda expressions can only be applied to abstract method of functional interface.

Example: 
()->{System.out.println("Hello")}; //Without argument, will print hello 
(int a)->{System.out.println(a)} //; One argument, will print value of a
(int a,int b)-> {a+b};//two argument, will return sum of these two integers


Default methods 
* Default method are those methods in interface which have body and use default keywords.
* Default method are introduced in Java 8 mainly because of backward compatibility.
* In case a new abstract method is added to the interface, all classes implementing the interface will break and will have to implement the new method. 
  With default methods, there will not be any impact on the interface implementing classes. default methods can be overridden if needed in the implementation. 


FUNCTIONAL INTERFACE 
* Functional interfaces are those interfaces which can have only one abstract method.
* It can have any number of static method, default methods or can override java.lang.objects Object’s class methods.
* There are many functional interfaces already present in java such as Comparable, Runnable.
* Lambda expressions can only be applied to abstract method of functional interface.
* Yes, you can create your own functional interface by annotating it with @FunctionalInterface 


METHOD REFERENCE
Method reference is used refer method of functional interface.
It is nothing but compact way of lambda expression.
You can simply replace lambda expression with method reference.

Example : 
BiFunction<Integer, Integer, Integer>adder = new Arithmetic()::add;  
int result = adder.apply(10, 20);  
System.out.println(result);  
}  


OPTIONAL 
* Java 8 has introduced new class Called Optional. This class is basically introduced to avoid NullPointerException in java.
* Optional class encapsulates optional value which is either present or not.
* It is a wrapper around object and can be use to avoid NullPointerExceptions.
* Eg : First non repeated character in a string 

Diff b/w Predicate & Function 
Predicate<T> is single argument function and either it returns true or false.
This can be used as the assignment target for a lambda expression or method reference.

Function<T,R> is also single argument function but it returns an Object.
Here T denotes type of input to the function and R denotes type of Result.


PERMGEN & METASPACE 
* Until Java 7, JVM used an area called PermGen to store classes.
* It got removed in Java 8 and replaced by MetaSpace.
Major advantage of MetaSpace over permgen:
* PermGen was fixed in term of mazimum size and can not grow dynamically ,
* But Metaspace can grow dynamically and do not have any size constraint.


Consumer & Supplier 
* Consumer is single argument functional interface which does not return any value.
* Supplier is function interface which does not take any parameter but returns the value using get method


INTERMEDIATE & TERMINAL OPERATIONS 
* Java 8 Stream supports both intermediate and terminal operation.
* Intermediate operations are lazy in nature and do not get executed immediately. Terminal operations are not lazy, they are executed as soon as encountered.
* Intermediate operation is memorized and is called when terminal operation is called.
* All Intermediate operations return stream as it just transforms stream into another and terminal operation don’t.


Example of Intermediate operations are:

filter(Predicate)
map(Function)
flatmap(Function)
sorted(Comparator)
distinct()
limit(long n)
skip(long n)

Example of terminal operations are :

forEach
toArray
reduce
collect
min
max
count
allMatch
noneMatch
findFirst
findAny

